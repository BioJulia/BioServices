var documenterSearchIndex = {"docs":
[{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"CurrentModule = BioServices","category":"page"},{"location":"man/eutils/#EUtils","page":"EUtils","title":"EUtils","text":"","category":"section"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"EUtils provide a interface to Entrez databases at NCBI.  The APIs are defined in the BioServices.EUtils module, which exports nine functions to access its databases:","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"Function Description\neinfo Retrieve a list of databases or statistics for a database.\nesearch Retrieve a list of UIDs matching a text query.\nepost Upload or append a list of UIDs to the Entrez History server.\nesummary Retrieve document summaries for a list of UIDs.\nefetch Retrieve formatted data records for a list of UIDs.\nelink Retrieve UIDs linked to an input set of UIDs.\negquery Retrieve the number of available records in all databases by a text query.\nespell Retrieve spelling suggestions.\necitmatch Retrieve PubMed IDs that correspond to a set of input citation strings.","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"\"The Nine E-Utilities in Brief\" summarizes all of the server-side programs corresponding to each function.","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"In this package, queries for databases are controlled by keyword parameters. For example, some functions take db parameter to specify the target database. Functions listed above take these parameters as keyword arguments and return a Response object as follows:","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"julia> using BioServices.EUtils       # import the nine functions above\n\njulia> res = einfo(db=\"pubmed\")       # retrieve statistics of the PubMed database\nResponse(200 OK, 18 headers, 27360 bytes in body)\n\njulia> write(\"pubmed.xml\", res.body)  # save retrieved data into a file\n27360\n\nshell> head pubmed.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE eInfoResult PUBLIC \"-//NLM//DTD einfo 20130322//EN\" \"https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20130322/einfo.dtd\">\n<eInfoResult>\n        <DbInfo>\n        <DbName>pubmed</DbName>\n        <MenuName>PubMed</MenuName>\n        <Description>PubMed bibliographic record</Description>\n        <DbBuild>Build161024-2207m.1</DbBuild>\n        <Count>26590895</Count>\n        <LastUpdate>2016/10/25 02:06</LastUpdate>\n","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"Let's see a few more examples of parameters.  The term parameter specifies a search string (e.g. esearch(db=\"gene\", term=\"tumor AND human[ORGN]\")).  The id parameter specifies a UID (or accession number) or a list of UIDs (e.g. efetch(db=\"protein\", id=\"NP_000537.3\", rettype=\"fasta\"), efetch(db=\"snp\", id=[\"rs55863639\", \"rs587780067\"])). The complete list of parameters can be found at \"The E-utilities In-Depth: Parameters, Syntax and More\".","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"When a request succeeds the response object has a data field containing formatted data, which can be saved to a file as demonstrated above. However, users are often interested in a part of the response data and may want to extract some fields in it. In such a case, EzXML.jl is helpful because it offers lots of tools to handle XML documents. The first thing you need to do is converting the response data into an XML document by parsexml:","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"julia> res = efetch(db=\"nuccore\", id=\"NM_001126.3\", retmode=\"xml\")\nResponse(200 OK, 19 headers, 41536 bytes in body)\n\njulia> using EzXML\n\njulia> doc = parsexml(res.body)\nEzXML.Document(EzXML.Node(<DOCUMENT_NODE@0x00007fdd4cc43770>))\n","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"After that, you can query fields you want using XPath:","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"julia> seq = findfirst(\"/GBSet/GBSeq\", doc)\nEzXML.Node(<ELEMENT_NODE@0x00007fdd49f34b10>)\n\njulia> nodecontent(findfirst(\"GBSeq_definition\", seq))\n\"Homo sapiens adenylosuccinate synthase (ADSS), mRNA\"\n\njulia> nodecontent(findfirst(\"GBSeq_accession-version\", seq))\n\"NM_001126.3\"\n\njulia> length(findall(\"//GBReference\", seq))\n10\n\njulia> using Bio.Seq\n\njulia> DNASequence(nodecontent(findfirst(\"GBSeq_sequence\", seq)))\n2791nt DNA Sequence:\nACGGGAGTGGCGCGCCAGGCCGCGGAAGGGGCGTGGCCT…TGATTAAAAGAACCAAATATTTCTAGTATGAAAAAAAAA\n","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"Every function can take a context dictionary as its first argument to set parameters for a query. Key-value pairs in a context are appended to the query in addition to other parameters passed by keyword arguments. The default context is an empty dictionary that sets no parameters. This context dictionary is especially useful when temporarily caching query UIDs into the Entrez History server. A request to the Entrez system can be associated with cached data using WebEnv and query_key parameters. In the following example, the search results of esearch is saved in the Entrez History server (note usehistory=true, which makes the server cache its search results) and then their summaries are retrieved in the next call of esummary:","category":"page"},{"location":"man/eutils/","page":"EUtils","title":"EUtils","text":"julia> context = Dict()  # create an empty context\nDict{Any,Any} with 0 entries\n\njulia> res = esearch(context, db=\"pubmed\", term=\"asthma[mesh] AND leukotrienes[mesh] AND 2009[pdat]\", usehistory=true)\nResponse(200 OK, 18 headers, 1574 bytes in body)\n\njulia> context  # the context dictionary has been updated\nDict{Any,Any} with 2 entries:\n  :query_key => \"1\"\n  :WebEnv    => \"NCID_1_9251987_130.14.22.215_9001_1477389145_1960133…\n\njulia> res = esummary(context, db=\"pubmed\")  # retrieve summaries in context\nResponse(200 OK, 18 headers, 135463 bytes in body)\n\njulia> write(\"asthma_leukotrienes_2009.xml\", res.body)  # save data into a file\n135463\n\nshell> head asthma_leukotrienes_2009.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n<!DOCTYPE eSummaryResult PUBLIC \"-//NLM//DTD esummary v1 20041029//EN\" \"https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20041029/esummary-v1.dtd\">\n<eSummaryResult>\n<DocSum>\n        <Id>20113659</Id>\n        <Item Name=\"PubDate\" Type=\"Date\">2009 Nov</Item>\n        <Item Name=\"EPubDate\" Type=\"Date\"></Item>\n        <Item Name=\"Source\" Type=\"String\">Zhongguo Dang Dai Er Ke Za Zhi</Item>\n        <Item Name=\"AuthorList\" Type=\"List\">\n                <Item Name=\"Author\" Type=\"String\">He MJ</Item>\n","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"CurrentModule = BioServices.UMLS","category":"page"},{"location":"man/umls/#UMLS","page":"UMLS","title":"UMLS","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"The Unified Medical Language System (UMLS) brings together many health and biomedical vocabularies and standards to enable interoperability between biomedical information systems and services. The UMLS Quick Start Guide provides an overview of the software, tools and services associated with the UMLS.","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"BioServices.UMLS is a Julia module that interfaces with the UMLS REST API to query the UMLS data programmatically.","category":"page"},{"location":"man/umls/#Getting-Started","page":"UMLS","title":"Getting Started","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"Sign up for a UMLS Terminology Services (UTS) account, where you agree to their terms of use.\nImport the module:\njulia  using BioServices.UMLS","category":"page"},{"location":"man/umls/#Available-Endpoints","page":"UMLS","title":"Available Endpoints","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"For a  complete list of the endpoints available through the UMLS REST API visit the UMLS REST API Documentation.","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"This module focuses on the following three endpoints. (Requests to expand API are encouraged through pull requests or issues in out GitHub repository.)","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"EndPoint Description\n/cas/v1/tickets Authentication\n/search/version Retrieves <abbr title=\"Concept Unique Identifier\">CUI</abbr> when searching by term or code\n/content/version/CUI Retrieves information about a known <abbr title=\"Concept Unique Identifier\">CUI</abbr>","category":"page"},{"location":"man/umls/#Exported-Functions","page":"UMLS","title":"Exported Functions","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"The following functions access the above enpoints. See the method documentation for specific usage.","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"Function Description\nget_tgt Get a ticket-granting ticket\nsearch_umls Search UMLS Rest API\nbest_match_cui Return concept ID of best match for a serach\nget-cui Get information associated with a Concept ID (<abbr title=\"Concept Unique Identifier\">CUI</abbr>)\nget_semantic_types Retrieve smenatic types associated with a <abbr title=\"Concept Unique Identifier\">CUI</abbr>","category":"page"},{"location":"man/umls/#Sample-workflow","page":"UMLS","title":"Sample workflow","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"Service tickets are needed each time you search or retrieve content from the UMLS REST API. A service ticket is retrieved automatically by this software from a ticket granting ticket. Thus, the first step of your workflow must start by requesting a ticket granting ticket using your credentials. There are two ways you can do this:","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"1. Use username and password","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"    user = \"myuser\"\n    psswd = \"mypsswd\"\n    tgt = get_tgt(username=user, password=psswd)","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"2. Use API KEY","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"    apikey = \"myapikey\"\n    tgt = get_tgt(apikey=apikey)","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"According to the UMLS documentation, ticket granting tickets are valid for 8 hours, therefore we locally store the ticket in a file and reuse it as long as it has not expired. If you get errors, you can force the get_tgt function to get a new ticket. For instance:","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"   tgt = get_tgt(force_new=true, apikey=apikey)","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"After authentication, you can query the <abbr title=\"Concept Unique Identifier\">CUI</abbr> associated with a term (e.g obesity) to get the semantic type(s) associated with that term (e.g obesity is a Disease or Syndrome)","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"    term = \"obesity\"\n    query = Dict(\"string\"=>term, \"searchType\"=>\"exact\" )\n    all_results= search_umls(tgt, query)\n    cui = best_match_cui(all_results)   # cui=\"C0028754\"\n    sm = get_semantic_types(tgt, cui)   # sm[1] == \"Disease or Syndrome\"","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"Options for searchType","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"Word: breaks a search term into its component parts, or words, and retrieves all concepts containing any of those words. For example: If you enter \"Heart Disease, Acute\" a Word search will retrieve all concepts containing any of the three words (heart, or disease, or acute). Word is the default Search Type selection and is appropriate for both English and non-English search terms.\nApproximate Match: applies lexical variant generation (LVG) rules to the search term and generally results in expanded retrieval of concepts. For example, a search for the term \"cold\" retrieves all concepts that contain any of the following words: COLDs, chronic obstructive lung disease, chronic obstructive lung diseases, cold, colder, coldest.\nExact Match: retrieves only concepts that include a synonym that exactly matches the search term.\nNormalized String: use with English language terms only. Removes lexical variations such as plural and upper case text and compares search terms to the Metathesaurus normalized string index to retrieve relevant concepts.\nNormalized Word: use with English language terms only. Removes lexical variations such as plural and upper case text, and compares search terms to the Metathesaurus normalized word index to retrieve relevant concepts.\nRight Truncation: retrieves concepts with synonyms that begin with the letters of the search term. For example, a right truncation search for \"bronch\" retrieves concepts that contain synonyms such as bronchitis, bronchiole, bronchial artery.\nLeft Truncation: retrieves concepts with synonyms that end with the letters of the search term. For example, a left truncation search for \"itis\" retrieves concepts that contain synonyms such as colitis, bronchitis, pancreatitis.","category":"page"},{"location":"man/umls/#Methods","page":"UMLS","title":"Methods","text":"","category":"section"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":" get_tgt(; force_new::Bool = false, kwargs...)","category":"page"},{"location":"man/umls/#BioServices.UMLS.get_tgt-Tuple{}","page":"UMLS","title":"BioServices.UMLS.get_tgt","text":"get_tgt(; force_new::Bool = false, kwargs...)\n\nRetrieve a ticket granting ticket (TGT) using\n\nUTS username and password OR\napikey\n\nA tgt is valid for 8 hours. Therefore, look for UTSTGT.txt in the local directory to see if it has been recently stored. One can force getting a new ticket by passing keyword argument `forcenew=true`\n\n####Examples\n\ntgt = get_tgt(username = \"myuser\", password = \"mypass\")\n\ntgt = get_tgt(apikey = \"mykey\")\n\n\n\n\n\n","category":"method"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"search_umls(tgt, query; version::String=\"current\", timeout=1)","category":"page"},{"location":"man/umls/#BioServices.UMLS.search_umls-Tuple{Any, Any}","page":"UMLS","title":"BioServices.UMLS.search_umls","text":"search_umls(tgt, query)\n\nSearch UMLS Rest API. For more info see UMLS_API\n\n####Arguments\n\ntgt: Ticket Granting Ticket\nquery: UMLS query containing the search term\nversion: Optional - defaults to current\n\n####Output\n\nresult_pages: Array, where each entry is a dictionary containing a page of\n\nresults. e.g\n\nDict{AbstractString,Any} with 3 entries:\n\"pageSize\"   => 25\n\"pageNumber\" => 1\n\"result\"     => Dict{AbstractString,Any}(\"classType\"=>\"searchResults\",\"result…\n\n####Examples\n\ncredentials = Credentials(user, psswd)\ntgt = get_tgt(credentials)\nterm = \"obesity\"\nquery = Dict(\"string\"=>term, \"searchType\"=>\"exact\" )\nall_results= search_umls(tgt, query)\n\n\n\n\n\n","category":"method"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":" best_match_cui(result_pages)","category":"page"},{"location":"man/umls/#BioServices.UMLS.best_match_cui-Tuple{Any}","page":"UMLS","title":"BioServices.UMLS.best_match_cui","text":"best_match_cui(result_pages)\n\nRetrieve the best match from array of all result pages\n\n####Example\n\ncui = best_match_cui(all_results)\n\n\n\n\n\n","category":"method"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":" get_cui(tgt,cui)","category":"page"},{"location":"man/umls/#BioServices.UMLS.get_cui-Tuple{Any, Any}","page":"UMLS","title":"BioServices.UMLS.get_cui","text":"get_cui(tgt,cui)\n\nRetrieve information (name, semantic types, number of atoms, etc) for a known CUI from latest UMLS version or a specific release.\n\nReturns UTS json response\n\nSee: https://documentation.uts.nlm.nih.gov/rest/concept\n\n####Example\n\ntgt = get_tgt(apikey = \"mykey\")\ncui = \"C0028754\"\nconcept = get_cui(tgt, cui)\n\n\n\n\n\n","category":"method"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"","category":"page"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"get_semantic_types(tgt, cui; version=\"current\")","category":"page"},{"location":"man/umls/#BioServices.UMLS.get_semantic_types-Tuple{Any, Any}","page":"UMLS","title":"BioServices.UMLS.get_semantic_types","text":"get_semantic_types(c::Credentials, cui)\n\nReturn an array of the semantic types associated with a cui\n\n####Example\n\ntgt = get_tgt(apikey = \"mykey\")\ncui = \"C0028754\"\nsm = get_semantic_types(tgt, cui)\n\n\n\n\n\n","category":"method"},{"location":"man/umls/","page":"UMLS","title":"UMLS","text":"","category":"page"},{"location":"#BioServices:-APIs-for-Web-Services","page":"Home","title":"BioServices: APIs for Web Services","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The BioServices module provides APIs for various web services.","category":"page"},{"location":"#Contents","page":"Home","title":"Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\"man/eutils.md\", \"man/umls.md\", \"man/gggenome.md\"]\nDepth = 6","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"CurrentModule=BioServices.GGGenome","category":"page"},{"location":"man/gggenome/#GGGenome","page":"GGGenome","title":"GGGenome","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"GGGenome is a ultrafast DNA sequence search service hosted by Database Center for Life Science (DBCLS). See GGGenome Help for more details.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"BioServices.GGGenome is a Julia module interfaces with the GGGenome REST API to query a DNA sequence to various databases programmatically.","category":"page"},{"location":"man/gggenome/#Getting-Started","page":"GGGenome","title":"Getting Started","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"Import module:","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"using BioServices.GGGenome","category":"page"},{"location":"man/gggenome/#Available-Databases","page":"GGGenome","title":"Available Databases","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"Genome sequences (hg19, mm10, dm3, ce10, TAIR10, pombe, etc.) and other sequence databases (e.g., refseq) are available.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"Full list of available databases can be found at [https://gggenome.dbcls.jp/en/mm10/help.html#db_list].","category":"page"},{"location":"man/gggenome/#Examples","page":"GGGenome","title":"Examples","text":"","category":"section"},{"location":"man/gggenome/#Example-1","page":"GGGenome","title":"Example 1","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"Search TTCATTGACAACATT in\nhuman genome hg19 (default),\nwith perfect matches (default),\nin json format.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"julia> res = gggsearch(\"TTCATTGACAACATT\", format=\"bed\", output=\"toString\");\n\njulia> print(res)\ntrack name=GGGenome description=\"GGGenome matches\"\nchr1    83462475        83462490        .       0       +\nchr2    161223114       161223129       .       0       +\nchr3    15289789        15289804        .       0       +\nchr3    84619844        84619859        .       0       +\n....","category":"page"},{"location":"man/gggenome/#Example-2","page":"GGGenome","title":"Example 2","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"Search TTCATTGACAACATTGCGT in\nmouse genome mm10,\nallowing 2 mismatches/gaps,\nsearch for + strand only,\nin tab-delimited txt format.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"julia> res = gggsearch(\"TTCATTGACAACATTGCGT\", db=\"mm10\", k=2, strand=\"+\", format=\"txt\", output=\"toString\");\n\njulia> print(res)\n# [ GGGenome | 2018-07-01 22:59:01 ]\n# database:     Mouse genome, GRCm38/mm10 (Dec, 2011)\n# query:        TTCATTGACAACATTGCGT\n# count:        41\n# name  strand  start   end     snippet snippet_pos     snippet_end\nchr1    +       19461997        19462014        AGTTATTCAGCTTTCTATCACGATCAGAGAACAAGCTGAGAAAAGGATGTTTTTGCTTTTGCTTTTGTTTTTCTTCTTATTTTGGAGTTCTCATCCATGATTCATTGACACCATTGCTTTGGCCTCTGGGAAGGGCAGCATATCTGGGTAAAAGCAGATAGCAGAGCAAATCTGCTTACTGCAACCAGCCAGGAAGGAAGCAATGAAAGCACGTTCAC  19461897        19462114\nchr1    +       98281503        98281520        TCTAGTGAGGAGAAATGTAAGCTAACGTGATAAACATTGTTTCTGATACACTAATTAAACTGACTTTTGAAAAGATGGCTTACATGTCTATCTAACATGTTTCATTGACACCATTGCTATAGTATGTAATTTTAATGTAAAATAGCCTTCTTTGCAGGGAATCCAGCCTGCTGCTGAATCTTTAAATTTTCAGTGTCTGTTGTCATAGTAACCAGAAT  98281403        98281620\n...","category":"page"},{"location":"man/gggenome/#Understanding-output-parameters","page":"GGGenome","title":"Understanding output parameters","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"By default, gggsearch() returns a HTTP.Messages.Response object.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"julia> query = \"GTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGA\";\n\njulia> res = gggsearch(query, db=\"refseq\", format=\"txt\");\n\njulia> typeof(res)\nHTTP.Messages.Response","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"By setting output=\"toString\", gggsearch() returns a String object.","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"julia> query = \"GTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGA\";\n\njulia> res = gggsearch(query, db=\"refseq\", format=\"txt\", output=\"toString\");\n\njulia> typeof(res)\nString\n\njulia> println(res)\n# [ GGGenome | 2018-07-01 22:25:16 ]\n# database:     RefSeq complete RNA release 88 (May, 2018)\n# query:        GTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGA\n# count:        15\n# query:        TCCCGCCGGCTTCTCCGGGATCGGTCGCGTTACCGCAC\n# count:        10\n# name  strand  start   end     snippet snippet_pos     snippet_end\nNR_003279.1 Mus musculus 28S ribosomal RNA (Rn28s1), ribosomal RNA      +       2326    2363    GAAGGGACGGGCGATGGCCTCCGTTGCCCTCGGCCGATCGAAAGGGAGTCGGGTTCAGATCCCCGAATCCGGAGTGGCGGAGATGGGCGCCGCGAGGCCAGTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGAGGCCTCGGGGAGAGTTCTCTTTTCTTTGTGAAGGGCAGGGCGCCCTGGAATGGGTTCGCCCCGAGAGAGGGGCCCGTGCCTTGGAAAGCGTCGCGGTTCC      2226    2463\nNR_003287.4 Homo sapiens RNA, 28S ribosomal N5 (RNA28SN5), ribosomal RNA        +       2574    2611    GGGACGGGCGATGGCCTCCGTTGCCCTCGGCCGATCGAAAGGGAGTCGGGTTCAGATCCCCGAATCCGGAGTGGCGGAGATGGGCGCCGCGAGGCGTCCAGTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGAGCCCCGGGGAGAGTTCTCTTTTCTTTGTGAAGGGCAGGGCGCCCTGGAATGGGTTCGCCCCGAGAGAGGGGCCCGTGCCTTGGAAAGCGTCGCGGTTCCG      2474    2711\n...","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"By setting output=\"extractTopHit\", gggsearch() returns a String object containing the top hit. Currently, this only works with format=\"txt\".","category":"page"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"julia> query = \"GTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGA\";\n\njulia> res = gggsearch(query, db=\"refseq\", format=\"txt\", output=\"extractTopHit\");\n\njulia> typeof(res)\nString\n\njulia> println(res)\nNR_003279.1 Mus musculus 28S ribosomal RNA (Rn28s1), ribosomal RNA      +       2326    2363    GAAGGGACGGGCGATGGCCTCCGTTGCCCTCGGCCGATCGAAAGGGAGTCGGGTTCAGATCCCCGAATCCGGAGTGGCGGAGATGGGCGCCGCGAGGCCAGTGCGGTAACGCGACCGATCCCGGAGAAGCCGGCGGGAGGCCTCGGGGAGAGTTCTCTTTTCTTTGTGAAGGGCAGGGCGCCCTGGAATGGGTTCGCCCCGAGAGAGGGGCCCGTGCCTTGGAAAGCGTCGCGGTTCC      2226    2463","category":"page"},{"location":"man/gggenome/#Methods","page":"GGGenome","title":"Methods","text":"","category":"section"},{"location":"man/gggenome/","page":"GGGenome","title":"GGGenome","text":"gggsearch\ngggdbs","category":"page"},{"location":"man/gggenome/#BioServices.GGGenome.gggsearch","page":"GGGenome","title":"BioServices.GGGenome.gggsearch","text":"gggsearch(query::AbstractString; \n          db=\"hg19\", k=0, strand=nothing, \n          format=\"html\", timeout=5, \n          output=nothing, show_url=false)\n\nRetrieve results of gggenome search of a query sequence.\n\nArguments\n\nRequired\n\nquery::String: Nucleotide sequence, case insensitive.\n\nOptional\n\ndb::String: Target database name. hg19 if not specified. Full list of databases: https://gggenome.dbcls.jp/en/help.html#db_list\nk::Integer: Maximum number of mismatches/gaps. 0 if not specified.\nstrand::String: '+' ('plus') or '-' ('minus') to search specified strand only.\nformat::String: [html|txt|csv|bed|gff|json]. html if not specified.\ntimeout::Real: Maximum time allowed for a query.\noutput::String: If \"toString\", a String object is returned. If \"extractTopHit\", a String object containing only top hit is returned (Currently, only works with format=\"txt\"). Otherwise, a HTTP.Messages.Response object is returned.\nshow_url::Bool: If true, print URL of REST API.\n\n\n\n\n\n","category":"function"},{"location":"man/gggenome/#BioServices.GGGenome.gggdbs","page":"GGGenome","title":"BioServices.GGGenome.gggdbs","text":"gggdbs()\n\nRetrieve full list of available databases. Full list of databases: https://gggenome.dbcls.jp/en/help.html#db_list.\n\n\n\n\n\n","category":"function"}]
}
