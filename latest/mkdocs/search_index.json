{
    "docs": [
        {
            "location": "/", 
            "text": "BioServices: APIs for Web Services\n\n\nThe \nBioServices\n module provides APIs for various web services.\n\n\n\n\nContents\n\n\n\n\nE-Utilities", 
            "title": "Home"
        }, 
        {
            "location": "/#bioservices-apis-for-web-services", 
            "text": "The  BioServices  module provides APIs for various web services.", 
            "title": "BioServices: APIs for Web Services"
        }, 
        {
            "location": "/#contents", 
            "text": "E-Utilities", 
            "title": "Contents"
        }, 
        {
            "location": "/man/eutils/", 
            "text": "E-Utilities\n\n\nE-Utilities provide a interface to Entrez databases at \nNCBI\n.  The APIs are defined in the \nBioServices.EUtils\n module, which exports nine functions to access its databases:\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neinfo\n\n\nRetrieve a list of databases or statistics for a database.\n\n\n\n\n\n\nesearch\n\n\nRetrieve a list of UIDs matching a text query.\n\n\n\n\n\n\nepost\n\n\nUpload or append a list of UIDs to the Entrez History server.\n\n\n\n\n\n\nesummary\n\n\nRetrieve document summaries for a list of UIDs.\n\n\n\n\n\n\nefetch\n\n\nRetrieve formatted data records for a list of UIDs.\n\n\n\n\n\n\nelink\n\n\nRetrieve UIDs linked to an input set of UIDs.\n\n\n\n\n\n\negquery\n\n\nRetrieve the number of available records in all databases by a text query.\n\n\n\n\n\n\nespell\n\n\nRetrieve spelling suggestions.\n\n\n\n\n\n\necitmatch\n\n\nRetrieve PubMed IDs that correspond to a set of input citation strings.\n\n\n\n\n\n\n\n\n\"The Nine E-utilities in Brief\"\n summarizes all of the server-side programs corresponding to each function.\n\n\nIn this package, queries for databases are controlled by keyword parameters. For example, some functions take \ndb\n parameter to specify the target database. Functions listed above take these parameters as keyword arguments and return a \nResponse\n object as follows:\n\n\njulia\n \nusing\n \nBioServices\n.\nEUtils\n      \n# import the nine functions above\n\n\n\njulia\n \nres\n \n=\n \neinfo\n(\ndb\n=\npubmed\n)\n       \n# retrieve statistics of the PubMed database\n\n\nResponse(200 OK, 18 headers, 27360 bytes in body)\n\n\n\njulia\n \nwrite\n(\npubmed.xml\n,\n \nres\n.\ndata\n)\n  \n# save retrieved data into a file\n\n\n27360\n\n\n\nshell\n head result.xml\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\n!DOCTYPE eInfoResult PUBLIC \n-//NLM//DTD einfo 20130322//EN\n \nhttps://eutils.ncbi.nlm.nih.gov/eutils/dtd/20130322/einfo.dtd\n\n\neInfoResult\n\n\n        \nDbInfo\n\n\n        \nDbName\npubmed\n/DbName\n\n\n        \nMenuName\nPubMed\n/MenuName\n\n\n        \nDescription\nPubMed bibliographic record\n/Description\n\n\n        \nDbBuild\nBuild161024-2207m.1\n/DbBuild\n\n\n        \nCount\n26590895\n/Count\n\n\n        \nLastUpdate\n2016/10/25 02:06\n/LastUpdate\n\n\n\n\n\n\nLet's see a few more examples of parameters.  The \nterm\n parameter specifies a search string (e.g. \nesearch(db=\"gene\", term=\"tumor AND human[ORGN]\")\n).  The \nid\n parameter specifies a UID (or accession number) or a list of UIDs (e.g. \nefetch(db=\"protein\", id=\"NP_000537.3\", rettype=\"fasta\")\n, \nefetch(db=\"snp\", id=[\"rs55863639\", \"rs587780067\"])\n). The complete list of parameters can be found at \n\"The E-utilities In-Depth: Parameters, Syntax and More\"\n.\n\n\nWhen a request succeeds the response object has a \ndata\n field containing formatted data, which can be saved to a file as demonstrated above. However, users are often interested in a part of the response data and may want to extract some fields in it. In such a case, \nEzXML.jl\n is helpful because it offers lots of tools to handle XML documents. The first thing you need to do is converting the response data into an XML document by \nparsexml\n:\n\n\njulia\n \nres\n \n=\n \nefetch\n(\ndb\n=\nnuccore\n,\n \nid\n=\nNM_001126.3\n,\n \nretmode\n=\nxml\n)\n\n\nResponse(200 OK, 19 headers, 41536 bytes in body)\n\n\n\njulia\n \nusing\n \nEzXML\n\n\n\njulia\n \ndoc\n \n=\n \nparsexml\n(\nres\n.\ndata\n)\n\n\nEzXML.Document(EzXML.Node(\nDOCUMENT_NODE@0x00007fdd4cc43770\n))\n\n\n\n\n\n\nAfter that, you can query fields you want using \nXPath\n:\n\n\njulia\n \nseq\n \n=\n \nfindfirst\n(\ndoc\n,\n \n/GBSet/GBSeq\n)\n\n\nEzXML.Node(\nELEMENT_NODE@0x00007fdd49f34b10\n)\n\n\n\njulia\n \ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_definition\n))\n\n\nHomo sapiens adenylosuccinate synthase (ADSS), mRNA\n\n\n\njulia\n \ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_accession-version\n))\n\n\nNM_001126.3\n\n\n\njulia\n \nlength\n(\nfind\n(\nseq\n,\n \n//GBReference\n))\n\n\n10\n\n\n\njulia\n \nusing\n \nBio\n.\nSeq\n\n\n\njulia\n \nDNASequence\n(\ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_sequence\n)))\n\n\n2791nt DNA Sequence:\n\n\nACGGGAGTGGCGCGCCAGGCCGCGGAAGGGGCGTGGCCT\u2026TGATTAAAAGAACCAAATATTTCTAGTATGAAAAAAAAA\n\n\n\n\n\n\nEvery function can take a context dictionary as its first argument to set parameters into a query. Key-value pairs in a context are appended to a query in addition to other parameters passed by keyword arguments.  The default context is an empty dictionary that sets no parameters. This context dictionary is especially useful when temporarily caching query UIDs into the Entrez History server. A request to the Entrez system can be associated with cached data using \"WebEnv\" and \"query_key\" parameters. In the following example, the search results of \nesearch\n is saved in the Entrez History server (note \nusehistory=true\n, which makes the server cache its search results) and then their summaries are retrieved in the next call of \nesummary\n:\n\n\njulia\n \ncontext\n \n=\n \nDict\n()\n  \n# create an empty context\n\n\nDict{Any,Any} with 0 entries\n\n\n\njulia\n \nres\n \n=\n \nesearch\n(\ncontext\n,\n \ndb\n=\npubmed\n,\n \nterm\n=\nasthma[mesh] AND leukotrienes[mesh] AND 2009[pdat]\n,\n \nusehistory\n=\ntrue\n)\n\n\nResponse(200 OK, 18 headers, 1574 bytes in body)\n\n\n\njulia\n \ncontext\n  \n# the context dictionary has been updated\n\n\nDict{Any,Any} with 2 entries:\n\n\n  :query_key =\n \n1\n\n\n  :WebEnv    =\n \nNCID_1_9251987_130.14.22.215_9001_1477389145_1960133\u2026\n\n\n\njulia\n \nres\n \n=\n \nesummary\n(\ncontext\n,\n \ndb\n=\npubmed\n)\n  \n# retrieve summaries in context\n\n\nResponse(200 OK, 18 headers, 135463 bytes in body)\n\n\n\njulia\n \nwrite\n(\nasthma_leukotrienes_2009.xml\n,\n \nres\n.\ndata\n)\n  \n# save data into a file\n\n\n135463\n\n\n\nshell\n head asthma_leukotrienes_2009.xml\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\n!DOCTYPE eSummaryResult PUBLIC \n-//NLM//DTD esummary v1 20041029//EN\n \nhttps://eutils.ncbi.nlm.nih.gov/eutils/dtd/20041029/esummary-v1.dtd\n\n\neSummaryResult\n\n\nDocSum\n\n\n        \nId\n20113659\n/Id\n\n\n        \nItem Name=\nPubDate\n Type=\nDate\n2009 Nov\n/Item\n\n\n        \nItem Name=\nEPubDate\n Type=\nDate\n/Item\n\n\n        \nItem Name=\nSource\n Type=\nString\nZhongguo Dang Dai Er Ke Za Zhi\n/Item\n\n\n        \nItem Name=\nAuthorList\n Type=\nList\n\n\n                \nItem Name=\nAuthor\n Type=\nString\nHe MJ\n/Item", 
            "title": "EUtils"
        }, 
        {
            "location": "/man/eutils/#e-utilities", 
            "text": "E-Utilities provide a interface to Entrez databases at  NCBI .  The APIs are defined in the  BioServices.EUtils  module, which exports nine functions to access its databases:     Function  Description      einfo  Retrieve a list of databases or statistics for a database.    esearch  Retrieve a list of UIDs matching a text query.    epost  Upload or append a list of UIDs to the Entrez History server.    esummary  Retrieve document summaries for a list of UIDs.    efetch  Retrieve formatted data records for a list of UIDs.    elink  Retrieve UIDs linked to an input set of UIDs.    egquery  Retrieve the number of available records in all databases by a text query.    espell  Retrieve spelling suggestions.    ecitmatch  Retrieve PubMed IDs that correspond to a set of input citation strings.     \"The Nine E-utilities in Brief\"  summarizes all of the server-side programs corresponding to each function.  In this package, queries for databases are controlled by keyword parameters. For example, some functions take  db  parameter to specify the target database. Functions listed above take these parameters as keyword arguments and return a  Response  object as follows:  julia   using   BioServices . EUtils        # import the nine functions above  julia   res   =   einfo ( db = pubmed )         # retrieve statistics of the PubMed database  Response(200 OK, 18 headers, 27360 bytes in body)  julia   write ( pubmed.xml ,   res . data )    # save retrieved data into a file  27360  shell  head result.xml ?xml version= 1.0  encoding= UTF-8  ?  !DOCTYPE eInfoResult PUBLIC  -//NLM//DTD einfo 20130322//EN   https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20130322/einfo.dtd  eInfoResult           DbInfo           DbName pubmed /DbName           MenuName PubMed /MenuName           Description PubMed bibliographic record /Description           DbBuild Build161024-2207m.1 /DbBuild           Count 26590895 /Count           LastUpdate 2016/10/25 02:06 /LastUpdate   Let's see a few more examples of parameters.  The  term  parameter specifies a search string (e.g.  esearch(db=\"gene\", term=\"tumor AND human[ORGN]\") ).  The  id  parameter specifies a UID (or accession number) or a list of UIDs (e.g.  efetch(db=\"protein\", id=\"NP_000537.3\", rettype=\"fasta\") ,  efetch(db=\"snp\", id=[\"rs55863639\", \"rs587780067\"]) ). The complete list of parameters can be found at  \"The E-utilities In-Depth: Parameters, Syntax and More\" .  When a request succeeds the response object has a  data  field containing formatted data, which can be saved to a file as demonstrated above. However, users are often interested in a part of the response data and may want to extract some fields in it. In such a case,  EzXML.jl  is helpful because it offers lots of tools to handle XML documents. The first thing you need to do is converting the response data into an XML document by  parsexml :  julia   res   =   efetch ( db = nuccore ,   id = NM_001126.3 ,   retmode = xml )  Response(200 OK, 19 headers, 41536 bytes in body)  julia   using   EzXML  julia   doc   =   parsexml ( res . data )  EzXML.Document(EzXML.Node( DOCUMENT_NODE@0x00007fdd4cc43770 ))   After that, you can query fields you want using  XPath :  julia   seq   =   findfirst ( doc ,   /GBSet/GBSeq )  EzXML.Node( ELEMENT_NODE@0x00007fdd49f34b10 )  julia   content ( findfirst ( seq ,   GBSeq_definition ))  Homo sapiens adenylosuccinate synthase (ADSS), mRNA  julia   content ( findfirst ( seq ,   GBSeq_accession-version ))  NM_001126.3  julia   length ( find ( seq ,   //GBReference ))  10  julia   using   Bio . Seq  julia   DNASequence ( content ( findfirst ( seq ,   GBSeq_sequence )))  2791nt DNA Sequence:  ACGGGAGTGGCGCGCCAGGCCGCGGAAGGGGCGTGGCCT\u2026TGATTAAAAGAACCAAATATTTCTAGTATGAAAAAAAAA   Every function can take a context dictionary as its first argument to set parameters into a query. Key-value pairs in a context are appended to a query in addition to other parameters passed by keyword arguments.  The default context is an empty dictionary that sets no parameters. This context dictionary is especially useful when temporarily caching query UIDs into the Entrez History server. A request to the Entrez system can be associated with cached data using \"WebEnv\" and \"query_key\" parameters. In the following example, the search results of  esearch  is saved in the Entrez History server (note  usehistory=true , which makes the server cache its search results) and then their summaries are retrieved in the next call of  esummary :  julia   context   =   Dict ()    # create an empty context  Dict{Any,Any} with 0 entries  julia   res   =   esearch ( context ,   db = pubmed ,   term = asthma[mesh] AND leukotrienes[mesh] AND 2009[pdat] ,   usehistory = true )  Response(200 OK, 18 headers, 1574 bytes in body)  julia   context    # the context dictionary has been updated  Dict{Any,Any} with 2 entries:    :query_key =   1    :WebEnv    =   NCID_1_9251987_130.14.22.215_9001_1477389145_1960133\u2026  julia   res   =   esummary ( context ,   db = pubmed )    # retrieve summaries in context  Response(200 OK, 18 headers, 135463 bytes in body)  julia   write ( asthma_leukotrienes_2009.xml ,   res . data )    # save data into a file  135463  shell  head asthma_leukotrienes_2009.xml ?xml version= 1.0  encoding= UTF-8  ?  !DOCTYPE eSummaryResult PUBLIC  -//NLM//DTD esummary v1 20041029//EN   https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20041029/esummary-v1.dtd  eSummaryResult  DocSum           Id 20113659 /Id           Item Name= PubDate  Type= Date 2009 Nov /Item           Item Name= EPubDate  Type= Date /Item           Item Name= Source  Type= String Zhongguo Dang Dai Er Ke Za Zhi /Item           Item Name= AuthorList  Type= List                   Item Name= Author  Type= String He MJ /Item", 
            "title": "E-Utilities"
        }
    ]
}