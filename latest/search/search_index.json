{
    "docs": [
        {
            "location": "/", 
            "text": "BioServices: APIs for Web Services\n\n\nThe \nBioServices\n module provides APIs for various web services.\n\n\n\n\nContents\n\n\n\n\nE-Utilities\n\n\nUMLS\n\n\nGetting Started\n\n\nAvailable Endpoints\n\n\nExported Functions\n\n\nSample workflow\n\n\nMethod's documentation\n\n\nGet ticket-granting ticket\n\n\nSearch UMLS\n\n\nBest CUI\n\n\nSearch based on CUI\n\n\nSemantic types", 
            "title": "Home"
        }, 
        {
            "location": "/#bioservices-apis-for-web-services", 
            "text": "The  BioServices  module provides APIs for various web services.", 
            "title": "BioServices: APIs for Web Services"
        }, 
        {
            "location": "/#contents", 
            "text": "E-Utilities  UMLS  Getting Started  Available Endpoints  Exported Functions  Sample workflow  Method's documentation  Get ticket-granting ticket  Search UMLS  Best CUI  Search based on CUI  Semantic types", 
            "title": "Contents"
        }, 
        {
            "location": "/man/eutils/", 
            "text": "E-Utilities\n\n\nE-Utilities provide a interface to Entrez databases at \nNCBI\n.  The APIs are defined in the \nBioServices.EUtils\n module, which exports nine functions to access its databases:\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\neinfo\n\n\nRetrieve a list of databases or statistics for a database.\n\n\n\n\n\n\nesearch\n\n\nRetrieve a list of UIDs matching a text query.\n\n\n\n\n\n\nepost\n\n\nUpload or append a list of UIDs to the Entrez History server.\n\n\n\n\n\n\nesummary\n\n\nRetrieve document summaries for a list of UIDs.\n\n\n\n\n\n\nefetch\n\n\nRetrieve formatted data records for a list of UIDs.\n\n\n\n\n\n\nelink\n\n\nRetrieve UIDs linked to an input set of UIDs.\n\n\n\n\n\n\negquery\n\n\nRetrieve the number of available records in all databases by a text query.\n\n\n\n\n\n\nespell\n\n\nRetrieve spelling suggestions.\n\n\n\n\n\n\necitmatch\n\n\nRetrieve PubMed IDs that correspond to a set of input citation strings.\n\n\n\n\n\n\n\n\n\"The Nine E-utilities in Brief\"\n summarizes all of the server-side programs corresponding to each function.\n\n\nIn this package, queries for databases are controlled by keyword parameters. For example, some functions take \ndb\n parameter to specify the target database. Functions listed above take these parameters as keyword arguments and return a \nResponse\n object as follows:\n\n\njulia\n \nusing\n \nBioServices\n.\nEUtils\n      \n# import the nine functions above\n\n\n\njulia\n \nres\n \n=\n \neinfo\n(\ndb\n=\npubmed\n)\n       \n# retrieve statistics of the PubMed database\n\n\nResponse(200 OK, 18 headers, 27360 bytes in body)\n\n\n\njulia\n \nwrite\n(\npubmed.xml\n,\n \nres\n.\ndata\n)\n  \n# save retrieved data into a file\n\n\n27360\n\n\n\nshell\n head result.xml\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\n!DOCTYPE eInfoResult PUBLIC \n-//NLM//DTD einfo 20130322//EN\n \nhttps://eutils.ncbi.nlm.nih.gov/eutils/dtd/20130322/einfo.dtd\n\n\neInfoResult\n\n\n        \nDbInfo\n\n\n        \nDbName\npubmed\n/DbName\n\n\n        \nMenuName\nPubMed\n/MenuName\n\n\n        \nDescription\nPubMed bibliographic record\n/Description\n\n\n        \nDbBuild\nBuild161024-2207m.1\n/DbBuild\n\n\n        \nCount\n26590895\n/Count\n\n\n        \nLastUpdate\n2016/10/25 02:06\n/LastUpdate\n\n\n\n\n\n\nLet's see a few more examples of parameters.  The \nterm\n parameter specifies a search string (e.g. \nesearch(db=\"gene\", term=\"tumor AND human[ORGN]\")\n).  The \nid\n parameter specifies a UID (or accession number) or a list of UIDs (e.g. \nefetch(db=\"protein\", id=\"NP_000537.3\", rettype=\"fasta\")\n, \nefetch(db=\"snp\", id=[\"rs55863639\", \"rs587780067\"])\n). The complete list of parameters can be found at \n\"The E-utilities In-Depth: Parameters, Syntax and More\"\n.\n\n\nWhen a request succeeds the response object has a \ndata\n field containing formatted data, which can be saved to a file as demonstrated above. However, users are often interested in a part of the response data and may want to extract some fields in it. In such a case, \nEzXML.jl\n is helpful because it offers lots of tools to handle XML documents. The first thing you need to do is converting the response data into an XML document by \nparsexml\n:\n\n\njulia\n \nres\n \n=\n \nefetch\n(\ndb\n=\nnuccore\n,\n \nid\n=\nNM_001126.3\n,\n \nretmode\n=\nxml\n)\n\n\nResponse(200 OK, 19 headers, 41536 bytes in body)\n\n\n\njulia\n \nusing\n \nEzXML\n\n\n\njulia\n \ndoc\n \n=\n \nparsexml\n(\nres\n.\ndata\n)\n\n\nEzXML.Document(EzXML.Node(\nDOCUMENT_NODE@0x00007fdd4cc43770\n))\n\n\n\n\n\n\nAfter that, you can query fields you want using \nXPath\n:\n\n\njulia\n \nseq\n \n=\n \nfindfirst\n(\ndoc\n,\n \n/GBSet/GBSeq\n)\n\n\nEzXML.Node(\nELEMENT_NODE@0x00007fdd49f34b10\n)\n\n\n\njulia\n \ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_definition\n))\n\n\nHomo sapiens adenylosuccinate synthase (ADSS), mRNA\n\n\n\njulia\n \ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_accession-version\n))\n\n\nNM_001126.3\n\n\n\njulia\n \nlength\n(\nfind\n(\nseq\n,\n \n//GBReference\n))\n\n\n10\n\n\n\njulia\n \nusing\n \nBio\n.\nSeq\n\n\n\njulia\n \nDNASequence\n(\ncontent\n(\nfindfirst\n(\nseq\n,\n \nGBSeq_sequence\n)))\n\n\n2791nt DNA Sequence:\n\n\nACGGGAGTGGCGCGCCAGGCCGCGGAAGGGGCGTGGCCT\u2026TGATTAAAAGAACCAAATATTTCTAGTATGAAAAAAAAA\n\n\n\n\n\n\nEvery function can take a context dictionary as its first argument to set parameters into a query. Key-value pairs in a context are appended to a query in addition to other parameters passed by keyword arguments.  The default context is an empty dictionary that sets no parameters. This context dictionary is especially useful when temporarily caching query UIDs into the Entrez History server. A request to the Entrez system can be associated with cached data using \"WebEnv\" and \"query_key\" parameters. In the following example, the search results of \nesearch\n is saved in the Entrez History server (note \nusehistory=true\n, which makes the server cache its search results) and then their summaries are retrieved in the next call of \nesummary\n:\n\n\njulia\n \ncontext\n \n=\n \nDict\n()\n  \n# create an empty context\n\n\nDict{Any,Any} with 0 entries\n\n\n\njulia\n \nres\n \n=\n \nesearch\n(\ncontext\n,\n \ndb\n=\npubmed\n,\n \nterm\n=\nasthma[mesh] AND leukotrienes[mesh] AND 2009[pdat]\n,\n \nusehistory\n=\ntrue\n)\n\n\nResponse(200 OK, 18 headers, 1574 bytes in body)\n\n\n\njulia\n \ncontext\n  \n# the context dictionary has been updated\n\n\nDict{Any,Any} with 2 entries:\n\n\n  :query_key =\n \n1\n\n\n  :WebEnv    =\n \nNCID_1_9251987_130.14.22.215_9001_1477389145_1960133\u2026\n\n\n\njulia\n \nres\n \n=\n \nesummary\n(\ncontext\n,\n \ndb\n=\npubmed\n)\n  \n# retrieve summaries in context\n\n\nResponse(200 OK, 18 headers, 135463 bytes in body)\n\n\n\njulia\n \nwrite\n(\nasthma_leukotrienes_2009.xml\n,\n \nres\n.\ndata\n)\n  \n# save data into a file\n\n\n135463\n\n\n\nshell\n head asthma_leukotrienes_2009.xml\n\n?xml version=\n1.0\n encoding=\nUTF-8\n ?\n\n\n!DOCTYPE eSummaryResult PUBLIC \n-//NLM//DTD esummary v1 20041029//EN\n \nhttps://eutils.ncbi.nlm.nih.gov/eutils/dtd/20041029/esummary-v1.dtd\n\n\neSummaryResult\n\n\nDocSum\n\n\n        \nId\n20113659\n/Id\n\n\n        \nItem Name=\nPubDate\n Type=\nDate\n2009 Nov\n/Item\n\n\n        \nItem Name=\nEPubDate\n Type=\nDate\n/Item\n\n\n        \nItem Name=\nSource\n Type=\nString\nZhongguo Dang Dai Er Ke Za Zhi\n/Item\n\n\n        \nItem Name=\nAuthorList\n Type=\nList\n\n\n                \nItem Name=\nAuthor\n Type=\nString\nHe MJ\n/Item", 
            "title": "EUtils"
        }, 
        {
            "location": "/man/eutils/#e-utilities", 
            "text": "E-Utilities provide a interface to Entrez databases at  NCBI .  The APIs are defined in the  BioServices.EUtils  module, which exports nine functions to access its databases:     Function  Description      einfo  Retrieve a list of databases or statistics for a database.    esearch  Retrieve a list of UIDs matching a text query.    epost  Upload or append a list of UIDs to the Entrez History server.    esummary  Retrieve document summaries for a list of UIDs.    efetch  Retrieve formatted data records for a list of UIDs.    elink  Retrieve UIDs linked to an input set of UIDs.    egquery  Retrieve the number of available records in all databases by a text query.    espell  Retrieve spelling suggestions.    ecitmatch  Retrieve PubMed IDs that correspond to a set of input citation strings.     \"The Nine E-utilities in Brief\"  summarizes all of the server-side programs corresponding to each function.  In this package, queries for databases are controlled by keyword parameters. For example, some functions take  db  parameter to specify the target database. Functions listed above take these parameters as keyword arguments and return a  Response  object as follows:  julia   using   BioServices . EUtils        # import the nine functions above  julia   res   =   einfo ( db = pubmed )         # retrieve statistics of the PubMed database  Response(200 OK, 18 headers, 27360 bytes in body)  julia   write ( pubmed.xml ,   res . data )    # save retrieved data into a file  27360  shell  head result.xml ?xml version= 1.0  encoding= UTF-8  ?  !DOCTYPE eInfoResult PUBLIC  -//NLM//DTD einfo 20130322//EN   https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20130322/einfo.dtd  eInfoResult           DbInfo           DbName pubmed /DbName           MenuName PubMed /MenuName           Description PubMed bibliographic record /Description           DbBuild Build161024-2207m.1 /DbBuild           Count 26590895 /Count           LastUpdate 2016/10/25 02:06 /LastUpdate   Let's see a few more examples of parameters.  The  term  parameter specifies a search string (e.g.  esearch(db=\"gene\", term=\"tumor AND human[ORGN]\") ).  The  id  parameter specifies a UID (or accession number) or a list of UIDs (e.g.  efetch(db=\"protein\", id=\"NP_000537.3\", rettype=\"fasta\") ,  efetch(db=\"snp\", id=[\"rs55863639\", \"rs587780067\"]) ). The complete list of parameters can be found at  \"The E-utilities In-Depth: Parameters, Syntax and More\" .  When a request succeeds the response object has a  data  field containing formatted data, which can be saved to a file as demonstrated above. However, users are often interested in a part of the response data and may want to extract some fields in it. In such a case,  EzXML.jl  is helpful because it offers lots of tools to handle XML documents. The first thing you need to do is converting the response data into an XML document by  parsexml :  julia   res   =   efetch ( db = nuccore ,   id = NM_001126.3 ,   retmode = xml )  Response(200 OK, 19 headers, 41536 bytes in body)  julia   using   EzXML  julia   doc   =   parsexml ( res . data )  EzXML.Document(EzXML.Node( DOCUMENT_NODE@0x00007fdd4cc43770 ))   After that, you can query fields you want using  XPath :  julia   seq   =   findfirst ( doc ,   /GBSet/GBSeq )  EzXML.Node( ELEMENT_NODE@0x00007fdd49f34b10 )  julia   content ( findfirst ( seq ,   GBSeq_definition ))  Homo sapiens adenylosuccinate synthase (ADSS), mRNA  julia   content ( findfirst ( seq ,   GBSeq_accession-version ))  NM_001126.3  julia   length ( find ( seq ,   //GBReference ))  10  julia   using   Bio . Seq  julia   DNASequence ( content ( findfirst ( seq ,   GBSeq_sequence )))  2791nt DNA Sequence:  ACGGGAGTGGCGCGCCAGGCCGCGGAAGGGGCGTGGCCT\u2026TGATTAAAAGAACCAAATATTTCTAGTATGAAAAAAAAA   Every function can take a context dictionary as its first argument to set parameters into a query. Key-value pairs in a context are appended to a query in addition to other parameters passed by keyword arguments.  The default context is an empty dictionary that sets no parameters. This context dictionary is especially useful when temporarily caching query UIDs into the Entrez History server. A request to the Entrez system can be associated with cached data using \"WebEnv\" and \"query_key\" parameters. In the following example, the search results of  esearch  is saved in the Entrez History server (note  usehistory=true , which makes the server cache its search results) and then their summaries are retrieved in the next call of  esummary :  julia   context   =   Dict ()    # create an empty context  Dict{Any,Any} with 0 entries  julia   res   =   esearch ( context ,   db = pubmed ,   term = asthma[mesh] AND leukotrienes[mesh] AND 2009[pdat] ,   usehistory = true )  Response(200 OK, 18 headers, 1574 bytes in body)  julia   context    # the context dictionary has been updated  Dict{Any,Any} with 2 entries:    :query_key =   1    :WebEnv    =   NCID_1_9251987_130.14.22.215_9001_1477389145_1960133\u2026  julia   res   =   esummary ( context ,   db = pubmed )    # retrieve summaries in context  Response(200 OK, 18 headers, 135463 bytes in body)  julia   write ( asthma_leukotrienes_2009.xml ,   res . data )    # save data into a file  135463  shell  head asthma_leukotrienes_2009.xml ?xml version= 1.0  encoding= UTF-8  ?  !DOCTYPE eSummaryResult PUBLIC  -//NLM//DTD esummary v1 20041029//EN   https://eutils.ncbi.nlm.nih.gov/eutils/dtd/20041029/esummary-v1.dtd  eSummaryResult  DocSum           Id 20113659 /Id           Item Name= PubDate  Type= Date 2009 Nov /Item           Item Name= EPubDate  Type= Date /Item           Item Name= Source  Type= String Zhongguo Dang Dai Er Ke Za Zhi /Item           Item Name= AuthorList  Type= List                   Item Name= Author  Type= String He MJ /Item", 
            "title": "E-Utilities"
        }, 
        {
            "location": "/man/umls/", 
            "text": "UMLS\n\n\nThe Unified Medical Language System (UMLS) brings together many health and biomedical vocabularies and standards to enable interoperability between systems. \nUMLS Quick Start Guide\n provides an overview of the software, tools and services associated with the UMLS.\n\n\nBioServices.UMLS is a Julia module that interfaces with the \nUMLS REST API\n to query the UMLS data programmatically.\n\n\n\n\nGetting Started\n\n\n\n\nSing up\n for a UMLS Terminology Services (UTS) account, where you agree to their terms of use.\n\n\n\n\nImport module:\n\n\nusing BioServices.UMLS\n\n\n\n\n\n\n\n\nAvailable Endpoints\n\n\nFor a  complete list of the enpoints made available in the REST API visit the \nREST API Documentation\n\n\nThis module focuses in the following three enpoints. (Request to expand API is encouraged trhough pull requests or issues in out GitHub repository.)\n\n\n\n\n\n\n\n\nEndPoint\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n/cas/v1/tickets\n\n\nAuthentication\n\n\n\n\n\n\n/search/version\n\n\nRetrieves CUI when searching by term or code\n\n\n\n\n\n\n/content/version/CUI\n\n\nRetrieves information about a known CUI\n\n\n\n\n\n\n\n\n\n\nCUI refers to Concept Unique Identifier\n\n\n\n\n\n\n\n\nExported Functions\n\n\nThe following functions access the mentioned enpoints. See the \nmethod's documentation\n for specific usage\n\n\n\n\n\n\n\n\nFunction\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nget_tgt\n\n\nGet a ticket-granting ticket\n\n\n\n\n\n\nsearch_umls\n\n\nSearch UMLS Rest API\n\n\n\n\n\n\nbest_match_cui\n\n\nReturn concept ID of best match for a serach\n\n\n\n\n\n\nget-cui\n\n\nGet information associated with a Concept ID(CUI)\n\n\n\n\n\n\nget_semantic_types\n\n\nRetrieve smenatic types associated with a CUI\n\n\n\n\n\n\n\n\n\n\n\n\nSample workflow\n\n\nService tickets are needed each time you search or retrieve content from the UMLS REST API.  A service ticket is retrieved automatically by this software from a \nticket granting ticket\n.\n\n\nTherefore, the first step of your workflow must start by requesting a \nticket granting ticket\n from your credentials. Two methods are available\n\n\nUse username and password\n\n\n    \nuser\n \n=\n \nmyuser\n\n    \npsswd\n \n=\n \nmypsswd\n\n    \ntgt\n \n=\n \nget_tgt\n(\nusername\n=\nuser\n,\n \npassword\n=\npsswd\n)\n\n\n\n\n\n\nUse API KEY\n\n\n    \napikey\n \n=\n \nmyapikey\n\n    \ntgt\n \n=\n \nget_tgt\n(\napikey\n=\napikey\n)\n\n\n\n\n\n\nAccording to the UMLS documentation. \nTicket granting tickets\n are valid for 8 hours, therefore we locally store the ticket in a file and  reuse it if it has not expired. If you get errors, you can force getting a new ticket. For instance\n\n\n   \ntgt\n \n=\n \nget_tgt\n(\nforce_new\n=\ntrue\n,\n \napikey\n=\napikey\n)\n\n\n\n\n\n\nAfter authentication, you can query the CUI associated with a term (e.g obesity) and the semantic types associated with that term (e.g obesity is a Disease or Syndrome)\n\n\n    \nterm\n \n=\n \nobesity\n\n    \nquery\n \n=\n \nDict\n(\nstring\n=\nterm\n,\n \nsearchType\n=\nexact\n \n)\n\n    \nall_results\n=\n \nsearch_umls\n(\ntgt\n,\n \nquery\n)\n\n    \ncui\n \n=\n \nbest_match_cui\n(\nall_results\n)\n   \n#cui=\nC0028754\n\n    \nsm\n \n=\n \nget_semantic_types\n(\ntgt\n,\n \ncui\n)\n   \n#sm[1] == \nDisease or Syndrome\n\n\n\n\n\n\nOptions for searchType\n\n\n\n\nWord: breaks a search term into its component parts, or words, and retrieves all concepts containing any of those words. For example: If you enter \"Heart Disease, Acute\" a Word search will retrieve all concepts containing any of the three words (heart, or disease, or acute). Word is the default Search Type selection and is appropriate for both English and non-English search terms.\n\n\nApproximate Match: applies lexical variant generation (LVG) rules to the search term and generally results in expanded retrieval of concepts. For example, a search for the term \"cold\" retrieves all concepts that contain any of the following words: COLDs, chronic obstructive lung disease, chronic obstructive lung diseases, cold, colder, coldest.\n\n\nExact Match: retrieves only concepts that include a synonym that exactly matches the search term.\n\n\nNormalized String: use with English language terms only. Removes lexical variations such as plural and upper case text and compares search terms to the Metathesaurus normalized string index to retrieve relevant concepts.\n\n\nNormalized Word: use with English language terms only. Removes lexical variations such as plural and upper case text, and compares search terms to the Metathesaurus normalized word index to retrieve relevant concepts.\n\n\nRight Truncation: retrieves concepts with synonyms that begin with the letters of the search term. For example, a right truncation search for \"bronch\" retrieves concepts that contain synonyms such as bronchitis, bronchiole, bronchial artery.\n\n\nLeft Truncation: retrieves concepts with synonyms that end with the letters of the search term. For example, a left truncation search for \"itis\" retrieves concepts that contain synonyms such as colitis, bronchitis, pancreatitis.\n\n\n\n\n\n\n\n\nMethod's documentation\n\n\n\n\n\n\nGet ticket-granting ticket\n\n\n#\n\n\nBioServices.UMLS.get_tgt\n \n \nMethod\n.\n\n\nget_tgt(; force_new::Bool = false, kwargs...)\n\n\nRetrieve a ticket granting ticket (TGT) using \n\n\n\n\nUTS username and password OR\n\n\napikey\n\n\n\n\nA tgt is valid for 8 hours. Therefore, look for UTS_TGT.txt in the local directory to see if it has been recently stored. One can force getting a  new ticket by passing keyword argument \nforce_new=true\n \n\n\nExamples\n\n\ntgt\n \n=\n \nget_tgt\n(\nusername\n \n=\n \nmyuser\n,\n \npassword\n \n=\n \nmypass\n)\n\n\n\n\n\n\ntgt\n \n=\n \nget_tgt\n(\napikey\n \n=\n \nmykey\n)\n\n\n\n\n\n\nsource\n\n\n\n\n\n\nSearch UMLS\n\n\n#\n\n\nBioServices.UMLS.search_umls\n \n \nMethod\n.\n\n\nsearch_umls(tgt, query)\n\n\nSearch UMLS Rest API. For more info see \nUMLS_API\n\n\nArguments\n\n\n\n\ntgt\n: Ticket Granting Ticket\n\n\nquery\n: UMLS query containing the search term\n\n\nversion:\n Optional - defaults to current\n\n\n\n\nOutput\n\n\n\n\nresult_pages\n: Array, where each entry is a dictionary containing a page of\n\n\n\n\nresults. e.g\n\n\nDict\n{\nAbstractString\n,\nAny\n}\n \nwith\n \n3\n \nentries\n:\n\n\npageSize\n   \n=\n \n25\n\n\npageNumber\n \n=\n \n1\n\n\nresult\n     \n=\n \nDict\n{\nAbstractString\n,\nAny\n}(\nclassType\n=\nsearchResults\n,\nresult\u2026\n\n\n\n\n\n\nExamples\n\n\ncredentials\n \n=\n \nCredentials\n(\nuser\n,\n \npsswd\n)\n\n\ntgt\n \n=\n \nget_tgt\n(\ncredentials\n)\n\n\nterm\n \n=\n \nobesity\n\n\nquery\n \n=\n \nDict\n(\nstring\n=\nterm\n,\n \nsearchType\n=\nexact\n \n)\n\n\nall_results\n=\n \nsearch_umls\n(\ntgt\n,\n \nquery\n)\n\n\n\n\n\n\nsource\n\n\n\n\n\n\nBest CUI\n\n\n#\n\n\nBioServices.UMLS.best_match_cui\n \n \nMethod\n.\n\n\nbest_match_cui(result_pages)\n\n\nRetrive the best match from array of all result pages\n\n\nExample\n\n\ncui\n \n=\n \nbest_match_cui\n(\nall_results\n)\n\n\n\n\n\n\nsource\n\n\n\n\n\n\nSearch based on CUI\n\n\n#\n\n\nBioServices.UMLS.get_cui\n \n \nMethod\n.\n\n\nget_cui(tgt,cui)\n\n\nRetrieve information (name, semantic types, number of atoms, etc) for a known CUI  from latest UMLS version or a specific release.\n\n\nReturns UTS json response\n\n\nSee: https://documentation.uts.nlm.nih.gov/rest/concept\n\n\nExample\n\n\ntgt\n \n=\n \nget_tgt\n(\napikey\n \n=\n \nmykey\n)\n\n\ncui\n \n=\n \nC0028754\n\n\nconcept\n \n=\n \nget_cui\n(\ntgt\n,\n \ncui\n)\n\n\n\n\n\n\nsource\n\n\n\n\n\n\nSemantic types\n\n\n#\n\n\nBioServices.UMLS.get_semantic_types\n \n \nMethod\n.\n\n\nget_semantic_types(c::Credentials, cui)\n\n\nReturn an array of the semantic types associated with a cui\n\n\nExample\n\n\ntgt\n \n=\n \nget_tgt\n(\napikey\n \n=\n \nmykey\n)\n\n\ncui\n \n=\n \nC0028754\n\n\nsm\n \n=\n \nget_semantic_types\n(\ntgt\n,\n \ncui\n)\n\n\n\n\n\n\nsource", 
            "title": "UMLS"
        }, 
        {
            "location": "/man/umls/#umls", 
            "text": "The Unified Medical Language System (UMLS) brings together many health and biomedical vocabularies and standards to enable interoperability between systems.  UMLS Quick Start Guide  provides an overview of the software, tools and services associated with the UMLS.  BioServices.UMLS is a Julia module that interfaces with the  UMLS REST API  to query the UMLS data programmatically.", 
            "title": "UMLS"
        }, 
        {
            "location": "/man/umls/#getting-started", 
            "text": "Sing up  for a UMLS Terminology Services (UTS) account, where you agree to their terms of use.   Import module:  using BioServices.UMLS", 
            "title": "Getting Started"
        }, 
        {
            "location": "/man/umls/#available-endpoints", 
            "text": "For a  complete list of the enpoints made available in the REST API visit the  REST API Documentation  This module focuses in the following three enpoints. (Request to expand API is encouraged trhough pull requests or issues in out GitHub repository.)     EndPoint  Description      /cas/v1/tickets  Authentication    /search/version  Retrieves CUI when searching by term or code    /content/version/CUI  Retrieves information about a known CUI      CUI refers to Concept Unique Identifier", 
            "title": "Available Endpoints"
        }, 
        {
            "location": "/man/umls/#exported-functions", 
            "text": "The following functions access the mentioned enpoints. See the  method's documentation  for specific usage     Function  Description      get_tgt  Get a ticket-granting ticket    search_umls  Search UMLS Rest API    best_match_cui  Return concept ID of best match for a serach    get-cui  Get information associated with a Concept ID(CUI)    get_semantic_types  Retrieve smenatic types associated with a CUI", 
            "title": "Exported Functions"
        }, 
        {
            "location": "/man/umls/#sample-workflow", 
            "text": "Service tickets are needed each time you search or retrieve content from the UMLS REST API.  A service ticket is retrieved automatically by this software from a  ticket granting ticket .  Therefore, the first step of your workflow must start by requesting a  ticket granting ticket  from your credentials. Two methods are available  Use username and password       user   =   myuser \n     psswd   =   mypsswd \n     tgt   =   get_tgt ( username = user ,   password = psswd )   Use API KEY       apikey   =   myapikey \n     tgt   =   get_tgt ( apikey = apikey )   According to the UMLS documentation.  Ticket granting tickets  are valid for 8 hours, therefore we locally store the ticket in a file and  reuse it if it has not expired. If you get errors, you can force getting a new ticket. For instance      tgt   =   get_tgt ( force_new = true ,   apikey = apikey )   After authentication, you can query the CUI associated with a term (e.g obesity) and the semantic types associated with that term (e.g obesity is a Disease or Syndrome)       term   =   obesity \n     query   =   Dict ( string = term ,   searchType = exact   ) \n     all_results =   search_umls ( tgt ,   query ) \n     cui   =   best_match_cui ( all_results )     #cui= C0028754 \n     sm   =   get_semantic_types ( tgt ,   cui )     #sm[1] ==  Disease or Syndrome   Options for searchType   Word: breaks a search term into its component parts, or words, and retrieves all concepts containing any of those words. For example: If you enter \"Heart Disease, Acute\" a Word search will retrieve all concepts containing any of the three words (heart, or disease, or acute). Word is the default Search Type selection and is appropriate for both English and non-English search terms.  Approximate Match: applies lexical variant generation (LVG) rules to the search term and generally results in expanded retrieval of concepts. For example, a search for the term \"cold\" retrieves all concepts that contain any of the following words: COLDs, chronic obstructive lung disease, chronic obstructive lung diseases, cold, colder, coldest.  Exact Match: retrieves only concepts that include a synonym that exactly matches the search term.  Normalized String: use with English language terms only. Removes lexical variations such as plural and upper case text and compares search terms to the Metathesaurus normalized string index to retrieve relevant concepts.  Normalized Word: use with English language terms only. Removes lexical variations such as plural and upper case text, and compares search terms to the Metathesaurus normalized word index to retrieve relevant concepts.  Right Truncation: retrieves concepts with synonyms that begin with the letters of the search term. For example, a right truncation search for \"bronch\" retrieves concepts that contain synonyms such as bronchitis, bronchiole, bronchial artery.  Left Truncation: retrieves concepts with synonyms that end with the letters of the search term. For example, a left truncation search for \"itis\" retrieves concepts that contain synonyms such as colitis, bronchitis, pancreatitis.", 
            "title": "Sample workflow"
        }, 
        {
            "location": "/man/umls/#methods-documentation", 
            "text": "", 
            "title": "Method's documentation"
        }, 
        {
            "location": "/man/umls/#get-ticket-granting-ticket", 
            "text": "#  BioServices.UMLS.get_tgt     Method .  get_tgt(; force_new::Bool = false, kwargs...)  Retrieve a ticket granting ticket (TGT) using    UTS username and password OR  apikey   A tgt is valid for 8 hours. Therefore, look for UTS_TGT.txt in the local directory to see if it has been recently stored. One can force getting a  new ticket by passing keyword argument  force_new=true", 
            "title": "Get ticket-granting ticket"
        }, 
        {
            "location": "/man/umls/#examples", 
            "text": "tgt   =   get_tgt ( username   =   myuser ,   password   =   mypass )   tgt   =   get_tgt ( apikey   =   mykey )   source", 
            "title": "Examples"
        }, 
        {
            "location": "/man/umls/#search-umls", 
            "text": "#  BioServices.UMLS.search_umls     Method .  search_umls(tgt, query)  Search UMLS Rest API. For more info see  UMLS_API", 
            "title": "Search UMLS"
        }, 
        {
            "location": "/man/umls/#arguments", 
            "text": "tgt : Ticket Granting Ticket  query : UMLS query containing the search term  version:  Optional - defaults to current", 
            "title": "Arguments"
        }, 
        {
            "location": "/man/umls/#output", 
            "text": "result_pages : Array, where each entry is a dictionary containing a page of   results. e.g  Dict { AbstractString , Any }   with   3   entries :  pageSize     =   25  pageNumber   =   1  result       =   Dict { AbstractString , Any }( classType = searchResults , result\u2026", 
            "title": "Output"
        }, 
        {
            "location": "/man/umls/#examples_1", 
            "text": "credentials   =   Credentials ( user ,   psswd )  tgt   =   get_tgt ( credentials )  term   =   obesity  query   =   Dict ( string = term ,   searchType = exact   )  all_results =   search_umls ( tgt ,   query )   source", 
            "title": "Examples"
        }, 
        {
            "location": "/man/umls/#best-cui", 
            "text": "#  BioServices.UMLS.best_match_cui     Method .  best_match_cui(result_pages)  Retrive the best match from array of all result pages", 
            "title": "Best CUI"
        }, 
        {
            "location": "/man/umls/#example", 
            "text": "cui   =   best_match_cui ( all_results )   source", 
            "title": "Example"
        }, 
        {
            "location": "/man/umls/#search-based-on-cui", 
            "text": "#  BioServices.UMLS.get_cui     Method .  get_cui(tgt,cui)  Retrieve information (name, semantic types, number of atoms, etc) for a known CUI  from latest UMLS version or a specific release.  Returns UTS json response  See: https://documentation.uts.nlm.nih.gov/rest/concept", 
            "title": "Search based on CUI"
        }, 
        {
            "location": "/man/umls/#example_1", 
            "text": "tgt   =   get_tgt ( apikey   =   mykey )  cui   =   C0028754  concept   =   get_cui ( tgt ,   cui )   source", 
            "title": "Example"
        }, 
        {
            "location": "/man/umls/#semantic-types", 
            "text": "#  BioServices.UMLS.get_semantic_types     Method .  get_semantic_types(c::Credentials, cui)  Return an array of the semantic types associated with a cui", 
            "title": "Semantic types"
        }, 
        {
            "location": "/man/umls/#example_2", 
            "text": "tgt   =   get_tgt ( apikey   =   mykey )  cui   =   C0028754  sm   =   get_semantic_types ( tgt ,   cui )   source", 
            "title": "Example"
        }
    ]
}